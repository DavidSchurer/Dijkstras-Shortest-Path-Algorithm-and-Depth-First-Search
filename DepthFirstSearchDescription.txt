(NOTE: The GraphM class in this project contains the implementation for Dijkstra's
Shortest Path Algorithm and the GraphL class contains the implementation for the Depth First
Search Algorithm)

Part 2) Depth First Search:

This project is to display the graph information and implement depth-first (search always
starts at node #1). Similar to Part 1, in the input data (e.g., data2.txt), the first line
tells the number of nodes, say n, followed by a text description of each of the 1 through
n nodes, one description per line (50 chars max length). After that, each line consists of
2 integers (instead of 3 integers in Part 1) representing an edge. If there is an edge from
node 1 to node 2, the data is: 1 2. A zero for the first integer signifies the end of the data
for that one graph. In the file, all the edges for the 1st node will be listed first, then all
the edges for the 2nd node, etc. Take them as they come, no sorting. There may be several graphs,
each having at most 100 nodes.

In part 2, you will use an adjacency list (array of lists) for graph implementation. In
GraphNode, the field edgeHead points to the head of a list of EdgeNode (which stores edge
info); visited is used to mark whether the node has been visited; data is a pointer to NodeData
that has the information about this GraphNode. Here structs are used for GraphNode and EdgeNode
for simplicity, you may use classes if desired.

struct EdgeNode;        // forward reference for the compiler
struct GraphNode {      // structs used for simplicity, use classes if desired
  EdgeNode* edgeHead;   // head of the list of edges
  NodeData* data;       // data information about each node
  bool visited;
};

struct EdgeNode {
  int adjGraphNode;     // subscript of the adjacent graph node
  EdgeNode* nextEdge;
};

Implement the following methods for the GraphL class:
(1) Constructor
(2) Destructor
(3) buildGraph
(4) displayGraph
(5) depthFirstSearch
